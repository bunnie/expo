// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// This file was generated automatically.
// Please do not modify content of this file directly.
// File generated by using template: "toplevel.rs.tpl"
// To regenerate this file follow OpenTitan topgen documentations.

#![allow(dead_code)]

//! This file contains enums and consts for use within the Rust codebase.
//!
//! These definitions are for information that depends on the top-specific chip
//! configuration, which includes:
//! - Device Memory Information (for Peripherals and Memory)
//! - PLIC Interrupt ID Names and Source Mappings
//! - Alert ID Names and Source Mappings
//! - Power Manager Wakeups

use core::convert::TryFrom;

/// Peripheral base address for uart0 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const UART0_BASE_ADDR: usize = 0x30000000;

/// Peripheral size for uart0 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #UART0_BASE_ADDR and
/// `UART0_BASE_ADDR + UART0_SIZE_BYTES`.
pub const UART0_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for rv_timer in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const RV_TIMER_BASE_ADDR: usize = 0x30100000;

/// Peripheral size for rv_timer in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #RV_TIMER_BASE_ADDR and
/// `RV_TIMER_BASE_ADDR + RV_TIMER_SIZE_BYTES`.
pub const RV_TIMER_SIZE_BYTES: usize = 0x200;

/// Peripheral base address for core device on otp_ctrl in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const OTP_CTRL_CORE_BASE_ADDR: usize = 0x30130000;

/// Peripheral size for core device on otp_ctrl in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #OTP_CTRL_CORE_BASE_ADDR and
/// `OTP_CTRL_CORE_BASE_ADDR + OTP_CTRL_CORE_SIZE_BYTES`.
pub const OTP_CTRL_CORE_SIZE_BYTES: usize = 0x8000;

/// Peripheral base address for prim device on otp_ctrl in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const OTP_CTRL_PRIM_BASE_ADDR: usize = 0x30140000;

/// Peripheral size for prim device on otp_ctrl in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #OTP_CTRL_PRIM_BASE_ADDR and
/// `OTP_CTRL_PRIM_BASE_ADDR + OTP_CTRL_PRIM_SIZE_BYTES`.
pub const OTP_CTRL_PRIM_SIZE_BYTES: usize = 0x20;

/// Peripheral base address for regs device on lc_ctrl in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const LC_CTRL_REGS_BASE_ADDR: usize = 0x30150000;

/// Peripheral size for regs device on lc_ctrl in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #LC_CTRL_REGS_BASE_ADDR and
/// `LC_CTRL_REGS_BASE_ADDR + LC_CTRL_REGS_SIZE_BYTES`.
pub const LC_CTRL_REGS_SIZE_BYTES: usize = 0x100;

/// Peripheral base address for alert_handler in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const ALERT_HANDLER_BASE_ADDR: usize = 0x30160000;

/// Peripheral size for alert_handler in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #ALERT_HANDLER_BASE_ADDR and
/// `ALERT_HANDLER_BASE_ADDR + ALERT_HANDLER_SIZE_BYTES`.
pub const ALERT_HANDLER_SIZE_BYTES: usize = 0x800;

/// Peripheral base address for pwrmgr_aon in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const PWRMGR_AON_BASE_ADDR: usize = 0x30400000;

/// Peripheral size for pwrmgr_aon in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #PWRMGR_AON_BASE_ADDR and
/// `PWRMGR_AON_BASE_ADDR + PWRMGR_AON_SIZE_BYTES`.
pub const PWRMGR_AON_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for rstmgr_aon in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const RSTMGR_AON_BASE_ADDR: usize = 0x30410000;

/// Peripheral size for rstmgr_aon in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #RSTMGR_AON_BASE_ADDR and
/// `RSTMGR_AON_BASE_ADDR + RSTMGR_AON_SIZE_BYTES`.
pub const RSTMGR_AON_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for clkmgr_aon in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const CLKMGR_AON_BASE_ADDR: usize = 0x30420000;

/// Peripheral size for clkmgr_aon in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #CLKMGR_AON_BASE_ADDR and
/// `CLKMGR_AON_BASE_ADDR + CLKMGR_AON_SIZE_BYTES`.
pub const CLKMGR_AON_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for aon_timer_aon in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const AON_TIMER_AON_BASE_ADDR: usize = 0x30470000;

/// Peripheral size for aon_timer_aon in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #AON_TIMER_AON_BASE_ADDR and
/// `AON_TIMER_AON_BASE_ADDR + AON_TIMER_AON_SIZE_BYTES`.
pub const AON_TIMER_AON_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for core device on soc_proxy in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const SOC_PROXY_CORE_BASE_ADDR: usize = 0x22030000;

/// Peripheral size for core device on soc_proxy in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #SOC_PROXY_CORE_BASE_ADDR and
/// `SOC_PROXY_CORE_BASE_ADDR + SOC_PROXY_CORE_SIZE_BYTES`.
pub const SOC_PROXY_CORE_SIZE_BYTES: usize = 0x10;

/// Peripheral base address for ctn device on soc_proxy in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const SOC_PROXY_CTN_BASE_ADDR: usize = 0x40000000;

/// Peripheral size for ctn device on soc_proxy in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #SOC_PROXY_CTN_BASE_ADDR and
/// `SOC_PROXY_CTN_BASE_ADDR + SOC_PROXY_CTN_SIZE_BYTES`.
pub const SOC_PROXY_CTN_SIZE_BYTES: usize = 0x40000000;

/// Peripheral base address for regs device on sram_ctrl_ret_aon in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const SRAM_CTRL_RET_AON_REGS_BASE_ADDR: usize = 0x30500000;

/// Peripheral size for regs device on sram_ctrl_ret_aon in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #SRAM_CTRL_RET_AON_REGS_BASE_ADDR and
/// `SRAM_CTRL_RET_AON_REGS_BASE_ADDR + SRAM_CTRL_RET_AON_REGS_SIZE_BYTES`.
pub const SRAM_CTRL_RET_AON_REGS_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for ram device on sram_ctrl_ret_aon in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const SRAM_CTRL_RET_AON_RAM_BASE_ADDR: usize = 0x30600000;

/// Peripheral size for ram device on sram_ctrl_ret_aon in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #SRAM_CTRL_RET_AON_RAM_BASE_ADDR and
/// `SRAM_CTRL_RET_AON_RAM_BASE_ADDR + SRAM_CTRL_RET_AON_RAM_SIZE_BYTES`.
pub const SRAM_CTRL_RET_AON_RAM_SIZE_BYTES: usize = 0x1000;

/// Peripheral base address for regs device on rv_dm in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const RV_DM_REGS_BASE_ADDR: usize = 0x21200000;

/// Peripheral size for regs device on rv_dm in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #RV_DM_REGS_BASE_ADDR and
/// `RV_DM_REGS_BASE_ADDR + RV_DM_REGS_SIZE_BYTES`.
pub const RV_DM_REGS_SIZE_BYTES: usize = 0x10;

/// Peripheral base address for mem device on rv_dm in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const RV_DM_MEM_BASE_ADDR: usize = 0x40000;

/// Peripheral size for mem device on rv_dm in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #RV_DM_MEM_BASE_ADDR and
/// `RV_DM_MEM_BASE_ADDR + RV_DM_MEM_SIZE_BYTES`.
pub const RV_DM_MEM_SIZE_BYTES: usize = 0x1000;

/// Peripheral base address for rv_plic in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const RV_PLIC_BASE_ADDR: usize = 0x28000000;

/// Peripheral size for rv_plic in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #RV_PLIC_BASE_ADDR and
/// `RV_PLIC_BASE_ADDR + RV_PLIC_SIZE_BYTES`.
pub const RV_PLIC_SIZE_BYTES: usize = 0x8000000;

/// Peripheral base address for aes in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const AES_BASE_ADDR: usize = 0x21100000;

/// Peripheral size for aes in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #AES_BASE_ADDR and
/// `AES_BASE_ADDR + AES_SIZE_BYTES`.
pub const AES_SIZE_BYTES: usize = 0x100;

/// Peripheral base address for hmac in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const HMAC_BASE_ADDR: usize = 0x21110000;

/// Peripheral size for hmac in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #HMAC_BASE_ADDR and
/// `HMAC_BASE_ADDR + HMAC_SIZE_BYTES`.
pub const HMAC_SIZE_BYTES: usize = 0x2000;

/// Peripheral base address for kmac in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const KMAC_BASE_ADDR: usize = 0x21120000;

/// Peripheral size for kmac in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #KMAC_BASE_ADDR and
/// `KMAC_BASE_ADDR + KMAC_SIZE_BYTES`.
pub const KMAC_SIZE_BYTES: usize = 0x1000;

/// Peripheral base address for otbn in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const OTBN_BASE_ADDR: usize = 0x21130000;

/// Peripheral size for otbn in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #OTBN_BASE_ADDR and
/// `OTBN_BASE_ADDR + OTBN_SIZE_BYTES`.
pub const OTBN_SIZE_BYTES: usize = 0x10000;

/// Peripheral base address for keymgr_dpe in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const KEYMGR_DPE_BASE_ADDR: usize = 0x21140000;

/// Peripheral size for keymgr_dpe in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #KEYMGR_DPE_BASE_ADDR and
/// `KEYMGR_DPE_BASE_ADDR + KEYMGR_DPE_SIZE_BYTES`.
pub const KEYMGR_DPE_SIZE_BYTES: usize = 0x100;

/// Peripheral base address for csrng in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const CSRNG_BASE_ADDR: usize = 0x21150000;

/// Peripheral size for csrng in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #CSRNG_BASE_ADDR and
/// `CSRNG_BASE_ADDR + CSRNG_SIZE_BYTES`.
pub const CSRNG_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for edn0 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const EDN0_BASE_ADDR: usize = 0x21170000;

/// Peripheral size for edn0 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #EDN0_BASE_ADDR and
/// `EDN0_BASE_ADDR + EDN0_SIZE_BYTES`.
pub const EDN0_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for edn1 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const EDN1_BASE_ADDR: usize = 0x21180000;

/// Peripheral size for edn1 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #EDN1_BASE_ADDR and
/// `EDN1_BASE_ADDR + EDN1_SIZE_BYTES`.
pub const EDN1_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for regs device on sram_ctrl_main in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const SRAM_CTRL_MAIN_REGS_BASE_ADDR: usize = 0x211C0000;

/// Peripheral size for regs device on sram_ctrl_main in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #SRAM_CTRL_MAIN_REGS_BASE_ADDR and
/// `SRAM_CTRL_MAIN_REGS_BASE_ADDR + SRAM_CTRL_MAIN_REGS_SIZE_BYTES`.
pub const SRAM_CTRL_MAIN_REGS_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for ram device on sram_ctrl_main in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const SRAM_CTRL_MAIN_RAM_BASE_ADDR: usize = 0x10000000;

/// Peripheral size for ram device on sram_ctrl_main in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #SRAM_CTRL_MAIN_RAM_BASE_ADDR and
/// `SRAM_CTRL_MAIN_RAM_BASE_ADDR + SRAM_CTRL_MAIN_RAM_SIZE_BYTES`.
pub const SRAM_CTRL_MAIN_RAM_SIZE_BYTES: usize = 0x10000;

/// Peripheral base address for regs device on sram_ctrl_mbox in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const SRAM_CTRL_MBOX_REGS_BASE_ADDR: usize = 0x211D0000;

/// Peripheral size for regs device on sram_ctrl_mbox in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #SRAM_CTRL_MBOX_REGS_BASE_ADDR and
/// `SRAM_CTRL_MBOX_REGS_BASE_ADDR + SRAM_CTRL_MBOX_REGS_SIZE_BYTES`.
pub const SRAM_CTRL_MBOX_REGS_SIZE_BYTES: usize = 0x40;

/// Peripheral base address for ram device on sram_ctrl_mbox in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const SRAM_CTRL_MBOX_RAM_BASE_ADDR: usize = 0x11000000;

/// Peripheral size for ram device on sram_ctrl_mbox in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #SRAM_CTRL_MBOX_RAM_BASE_ADDR and
/// `SRAM_CTRL_MBOX_RAM_BASE_ADDR + SRAM_CTRL_MBOX_RAM_SIZE_BYTES`.
pub const SRAM_CTRL_MBOX_RAM_SIZE_BYTES: usize = 0x1000;

/// Peripheral base address for regs device on rom_ctrl0 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const ROM_CTRL0_REGS_BASE_ADDR: usize = 0x211E0000;

/// Peripheral size for regs device on rom_ctrl0 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #ROM_CTRL0_REGS_BASE_ADDR and
/// `ROM_CTRL0_REGS_BASE_ADDR + ROM_CTRL0_REGS_SIZE_BYTES`.
pub const ROM_CTRL0_REGS_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for rom device on rom_ctrl0 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const ROM_CTRL0_ROM_BASE_ADDR: usize = 0x8000;

/// Peripheral size for rom device on rom_ctrl0 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #ROM_CTRL0_ROM_BASE_ADDR and
/// `ROM_CTRL0_ROM_BASE_ADDR + ROM_CTRL0_ROM_SIZE_BYTES`.
pub const ROM_CTRL0_ROM_SIZE_BYTES: usize = 0x8000;

/// Peripheral base address for regs device on rom_ctrl1 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const ROM_CTRL1_REGS_BASE_ADDR: usize = 0x211E1000;

/// Peripheral size for regs device on rom_ctrl1 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #ROM_CTRL1_REGS_BASE_ADDR and
/// `ROM_CTRL1_REGS_BASE_ADDR + ROM_CTRL1_REGS_SIZE_BYTES`.
pub const ROM_CTRL1_REGS_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for rom device on rom_ctrl1 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const ROM_CTRL1_ROM_BASE_ADDR: usize = 0x20000;

/// Peripheral size for rom device on rom_ctrl1 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #ROM_CTRL1_ROM_BASE_ADDR and
/// `ROM_CTRL1_ROM_BASE_ADDR + ROM_CTRL1_ROM_SIZE_BYTES`.
pub const ROM_CTRL1_ROM_SIZE_BYTES: usize = 0x10000;

/// Peripheral base address for dma in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const DMA_BASE_ADDR: usize = 0x22010000;

/// Peripheral size for dma in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #DMA_BASE_ADDR and
/// `DMA_BASE_ADDR + DMA_SIZE_BYTES`.
pub const DMA_SIZE_BYTES: usize = 0x200;

/// Peripheral base address for core device on mbx0 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const MBX0_CORE_BASE_ADDR: usize = 0x22000000;

/// Peripheral size for core device on mbx0 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #MBX0_CORE_BASE_ADDR and
/// `MBX0_CORE_BASE_ADDR + MBX0_CORE_SIZE_BYTES`.
pub const MBX0_CORE_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for core device on mbx1 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const MBX1_CORE_BASE_ADDR: usize = 0x22000100;

/// Peripheral size for core device on mbx1 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #MBX1_CORE_BASE_ADDR and
/// `MBX1_CORE_BASE_ADDR + MBX1_CORE_SIZE_BYTES`.
pub const MBX1_CORE_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for core device on mbx2 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const MBX2_CORE_BASE_ADDR: usize = 0x22000200;

/// Peripheral size for core device on mbx2 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #MBX2_CORE_BASE_ADDR and
/// `MBX2_CORE_BASE_ADDR + MBX2_CORE_SIZE_BYTES`.
pub const MBX2_CORE_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for core device on mbx3 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const MBX3_CORE_BASE_ADDR: usize = 0x22000300;

/// Peripheral size for core device on mbx3 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #MBX3_CORE_BASE_ADDR and
/// `MBX3_CORE_BASE_ADDR + MBX3_CORE_SIZE_BYTES`.
pub const MBX3_CORE_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for core device on mbx4 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const MBX4_CORE_BASE_ADDR: usize = 0x22000400;

/// Peripheral size for core device on mbx4 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #MBX4_CORE_BASE_ADDR and
/// `MBX4_CORE_BASE_ADDR + MBX4_CORE_SIZE_BYTES`.
pub const MBX4_CORE_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for core device on mbx5 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const MBX5_CORE_BASE_ADDR: usize = 0x22000500;

/// Peripheral size for core device on mbx5 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #MBX5_CORE_BASE_ADDR and
/// `MBX5_CORE_BASE_ADDR + MBX5_CORE_SIZE_BYTES`.
pub const MBX5_CORE_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for core device on mbx6 in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const MBX6_CORE_BASE_ADDR: usize = 0x22000600;

/// Peripheral size for core device on mbx6 in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #MBX6_CORE_BASE_ADDR and
/// `MBX6_CORE_BASE_ADDR + MBX6_CORE_SIZE_BYTES`.
pub const MBX6_CORE_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for core device on mbx_jtag in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const MBX_JTAG_CORE_BASE_ADDR: usize = 0x22000800;

/// Peripheral size for core device on mbx_jtag in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #MBX_JTAG_CORE_BASE_ADDR and
/// `MBX_JTAG_CORE_BASE_ADDR + MBX_JTAG_CORE_SIZE_BYTES`.
pub const MBX_JTAG_CORE_SIZE_BYTES: usize = 0x80;

/// Peripheral base address for core device on soc_dbg_ctrl in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const SOC_DBG_CTRL_CORE_BASE_ADDR: usize = 0x30170000;

/// Peripheral size for core device on soc_dbg_ctrl in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #SOC_DBG_CTRL_CORE_BASE_ADDR and
/// `SOC_DBG_CTRL_CORE_BASE_ADDR + SOC_DBG_CTRL_CORE_SIZE_BYTES`.
pub const SOC_DBG_CTRL_CORE_SIZE_BYTES: usize = 0x20;

/// Peripheral base address for cfg device on rv_core_ibex in top crossbar.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const RV_CORE_IBEX_CFG_BASE_ADDR: usize = 0x211F0000;

/// Peripheral size for cfg device on rv_core_ibex in top crossbar.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #RV_CORE_IBEX_CFG_BASE_ADDR and
/// `RV_CORE_IBEX_CFG_BASE_ADDR + RV_CORE_IBEX_CFG_SIZE_BYTES`.
pub const RV_CORE_IBEX_CFG_SIZE_BYTES: usize = 0x800;

/// Memory base address for ctn in top crossbar.
pub const CTN_BASE_ADDR: usize = 0x40000000;

/// Memory size for ctn in top crossbar.
pub const CTN_SIZE_BYTES: usize = 0x40000000;

/// Memory base address for ram_ret_aon in top crossbar.
pub const RAM_RET_AON_BASE_ADDR: usize = 0x30600000;

/// Memory size for ram_ret_aon in top crossbar.
pub const RAM_RET_AON_SIZE_BYTES: usize = 0x1000;

/// Memory base address for ram_main in top crossbar.
pub const RAM_MAIN_BASE_ADDR: usize = 0x10000000;

/// Memory size for ram_main in top crossbar.
pub const RAM_MAIN_SIZE_BYTES: usize = 0x10000;

/// Memory base address for ram_mbox in top crossbar.
pub const RAM_MBOX_BASE_ADDR: usize = 0x11000000;

/// Memory size for ram_mbox in top crossbar.
pub const RAM_MBOX_SIZE_BYTES: usize = 0x1000;

/// Memory base address for rom0 in top crossbar.
pub const ROM0_BASE_ADDR: usize = 0x8000;

/// Memory size for rom0 in top crossbar.
pub const ROM0_SIZE_BYTES: usize = 0x8000;

/// Memory base address for rom1 in top crossbar.
pub const ROM1_BASE_ADDR: usize = 0x20000;

/// Memory size for rom1 in top crossbar.
pub const ROM1_SIZE_BYTES: usize = 0x10000;

/// PLIC Interrupt Source Peripheral.
///
/// Enumeration used to determine which peripheral asserted the corresponding
/// interrupt.
#[derive(Copy, Clone, PartialEq, Eq)]
#[repr(u32)]
pub enum PlicPeripheral {
    /// Unknown Peripheral
    Unknown = 0,
    /// uart0
    Uart0 = 1,
    /// rv_timer
    RvTimer = 2,
    /// otp_ctrl
    OtpCtrl = 3,
    /// alert_handler
    AlertHandler = 4,
    /// pwrmgr_aon
    PwrmgrAon = 5,
    /// aon_timer_aon
    AonTimerAon = 6,
    /// soc_proxy
    SocProxy = 7,
    /// hmac
    Hmac = 8,
    /// kmac
    Kmac = 9,
    /// otbn
    Otbn = 10,
    /// keymgr_dpe
    KeymgrDpe = 11,
    /// csrng
    Csrng = 12,
    /// edn0
    Edn0 = 13,
    /// edn1
    Edn1 = 14,
    /// dma
    Dma = 15,
    /// mbx0
    Mbx0 = 16,
    /// mbx1
    Mbx1 = 17,
    /// mbx2
    Mbx2 = 18,
    /// mbx3
    Mbx3 = 19,
    /// mbx4
    Mbx4 = 20,
    /// mbx5
    Mbx5 = 21,
    /// mbx6
    Mbx6 = 22,
    /// mbx_jtag
    MbxJtag = 23,
    /// racl_ctrl
    RaclCtrl = 24,
    /// ac_range_check
    AcRangeCheck = 25,
}

impl TryFrom<u32> for PlicPeripheral {
    type Error = u32;
    fn try_from(val: u32) -> Result<Self, Self::Error> {
        match val {
            0 => Ok(Self::Unknown),
            1 => Ok(Self::Uart0),
            2 => Ok(Self::RvTimer),
            3 => Ok(Self::OtpCtrl),
            4 => Ok(Self::AlertHandler),
            5 => Ok(Self::PwrmgrAon),
            6 => Ok(Self::AonTimerAon),
            7 => Ok(Self::SocProxy),
            8 => Ok(Self::Hmac),
            9 => Ok(Self::Kmac),
            10 => Ok(Self::Otbn),
            11 => Ok(Self::KeymgrDpe),
            12 => Ok(Self::Csrng),
            13 => Ok(Self::Edn0),
            14 => Ok(Self::Edn1),
            15 => Ok(Self::Dma),
            16 => Ok(Self::Mbx0),
            17 => Ok(Self::Mbx1),
            18 => Ok(Self::Mbx2),
            19 => Ok(Self::Mbx3),
            20 => Ok(Self::Mbx4),
            21 => Ok(Self::Mbx5),
            22 => Ok(Self::Mbx6),
            23 => Ok(Self::MbxJtag),
            24 => Ok(Self::RaclCtrl),
            25 => Ok(Self::AcRangeCheck),
            _ => Err(val),
        }
    }
}

/// PLIC Interrupt Source.
///
/// Enumeration of all PLIC interrupt sources. The interrupt sources belonging to
/// the same peripheral are guaranteed to be consecutive.
#[derive(Copy, Clone, PartialEq, Eq)]
#[repr(u32)]
pub enum PlicIrqId {
    /// No Interrupt
    None = 0,
    /// uart0_tx_watermark
    Uart0TxWatermark = 1,
    /// uart0_rx_watermark
    Uart0RxWatermark = 2,
    /// uart0_tx_done
    Uart0TxDone = 3,
    /// uart0_rx_overflow
    Uart0RxOverflow = 4,
    /// uart0_rx_frame_err
    Uart0RxFrameErr = 5,
    /// uart0_rx_break_err
    Uart0RxBreakErr = 6,
    /// uart0_rx_timeout
    Uart0RxTimeout = 7,
    /// uart0_rx_parity_err
    Uart0RxParityErr = 8,
    /// uart0_tx_empty
    Uart0TxEmpty = 9,
    /// rv_timer_timer_expired_hart0_timer0
    RvTimerTimerExpiredHart0Timer0 = 10,
    /// otp_ctrl_otp_operation_done
    OtpCtrlOtpOperationDone = 11,
    /// otp_ctrl_otp_error
    OtpCtrlOtpError = 12,
    /// alert_handler_classa
    AlertHandlerClassa = 13,
    /// alert_handler_classb
    AlertHandlerClassb = 14,
    /// alert_handler_classc
    AlertHandlerClassc = 15,
    /// alert_handler_classd
    AlertHandlerClassd = 16,
    /// pwrmgr_aon_wakeup
    PwrmgrAonWakeup = 17,
    /// aon_timer_aon_wkup_timer_expired
    AonTimerAonWkupTimerExpired = 18,
    /// aon_timer_aon_wdog_timer_bark
    AonTimerAonWdogTimerBark = 19,
    /// soc_proxy_external 0
    SocProxyExternal0 = 20,
    /// soc_proxy_external 1
    SocProxyExternal1 = 21,
    /// soc_proxy_external 2
    SocProxyExternal2 = 22,
    /// soc_proxy_external 3
    SocProxyExternal3 = 23,
    /// soc_proxy_external 4
    SocProxyExternal4 = 24,
    /// soc_proxy_external 5
    SocProxyExternal5 = 25,
    /// soc_proxy_external 6
    SocProxyExternal6 = 26,
    /// soc_proxy_external 7
    SocProxyExternal7 = 27,
    /// soc_proxy_external 8
    SocProxyExternal8 = 28,
    /// soc_proxy_external 9
    SocProxyExternal9 = 29,
    /// soc_proxy_external 10
    SocProxyExternal10 = 30,
    /// soc_proxy_external 11
    SocProxyExternal11 = 31,
    /// soc_proxy_external 12
    SocProxyExternal12 = 32,
    /// soc_proxy_external 13
    SocProxyExternal13 = 33,
    /// soc_proxy_external 14
    SocProxyExternal14 = 34,
    /// soc_proxy_external 15
    SocProxyExternal15 = 35,
    /// soc_proxy_external 16
    SocProxyExternal16 = 36,
    /// soc_proxy_external 17
    SocProxyExternal17 = 37,
    /// soc_proxy_external 18
    SocProxyExternal18 = 38,
    /// soc_proxy_external 19
    SocProxyExternal19 = 39,
    /// soc_proxy_external 20
    SocProxyExternal20 = 40,
    /// soc_proxy_external 21
    SocProxyExternal21 = 41,
    /// soc_proxy_external 22
    SocProxyExternal22 = 42,
    /// soc_proxy_external 23
    SocProxyExternal23 = 43,
    /// soc_proxy_external 24
    SocProxyExternal24 = 44,
    /// soc_proxy_external 25
    SocProxyExternal25 = 45,
    /// soc_proxy_external 26
    SocProxyExternal26 = 46,
    /// soc_proxy_external 27
    SocProxyExternal27 = 47,
    /// soc_proxy_external 28
    SocProxyExternal28 = 48,
    /// soc_proxy_external 29
    SocProxyExternal29 = 49,
    /// soc_proxy_external 30
    SocProxyExternal30 = 50,
    /// soc_proxy_external 31
    SocProxyExternal31 = 51,
    /// hmac_hmac_done
    HmacHmacDone = 52,
    /// hmac_fifo_empty
    HmacFifoEmpty = 53,
    /// hmac_hmac_err
    HmacHmacErr = 54,
    /// kmac_kmac_done
    KmacKmacDone = 55,
    /// kmac_fifo_empty
    KmacFifoEmpty = 56,
    /// kmac_kmac_err
    KmacKmacErr = 57,
    /// otbn_done
    OtbnDone = 58,
    /// keymgr_dpe_op_done
    KeymgrDpeOpDone = 59,
    /// csrng_cs_cmd_req_done
    CsrngCsCmdReqDone = 60,
    /// csrng_cs_entropy_req
    CsrngCsEntropyReq = 61,
    /// csrng_cs_hw_inst_exc
    CsrngCsHwInstExc = 62,
    /// csrng_cs_fatal_err
    CsrngCsFatalErr = 63,
    /// edn0_edn_cmd_req_done
    Edn0EdnCmdReqDone = 64,
    /// edn0_edn_fatal_err
    Edn0EdnFatalErr = 65,
    /// edn1_edn_cmd_req_done
    Edn1EdnCmdReqDone = 66,
    /// edn1_edn_fatal_err
    Edn1EdnFatalErr = 67,
    /// dma_dma_done
    DmaDmaDone = 68,
    /// dma_dma_chunk_done
    DmaDmaChunkDone = 69,
    /// dma_dma_error
    DmaDmaError = 70,
    /// mbx0_mbx_ready
    Mbx0MbxReady = 71,
    /// mbx0_mbx_abort
    Mbx0MbxAbort = 72,
    /// mbx0_mbx_error
    Mbx0MbxError = 73,
    /// mbx1_mbx_ready
    Mbx1MbxReady = 74,
    /// mbx1_mbx_abort
    Mbx1MbxAbort = 75,
    /// mbx1_mbx_error
    Mbx1MbxError = 76,
    /// mbx2_mbx_ready
    Mbx2MbxReady = 77,
    /// mbx2_mbx_abort
    Mbx2MbxAbort = 78,
    /// mbx2_mbx_error
    Mbx2MbxError = 79,
    /// mbx3_mbx_ready
    Mbx3MbxReady = 80,
    /// mbx3_mbx_abort
    Mbx3MbxAbort = 81,
    /// mbx3_mbx_error
    Mbx3MbxError = 82,
    /// mbx4_mbx_ready
    Mbx4MbxReady = 83,
    /// mbx4_mbx_abort
    Mbx4MbxAbort = 84,
    /// mbx4_mbx_error
    Mbx4MbxError = 85,
    /// mbx5_mbx_ready
    Mbx5MbxReady = 86,
    /// mbx5_mbx_abort
    Mbx5MbxAbort = 87,
    /// mbx5_mbx_error
    Mbx5MbxError = 88,
    /// mbx6_mbx_ready
    Mbx6MbxReady = 89,
    /// mbx6_mbx_abort
    Mbx6MbxAbort = 90,
    /// mbx6_mbx_error
    Mbx6MbxError = 91,
    /// mbx_jtag_mbx_ready
    MbxJtagMbxReady = 92,
    /// mbx_jtag_mbx_abort
    MbxJtagMbxAbort = 93,
    /// mbx_jtag_mbx_error
    MbxJtagMbxError = 94,
    /// racl_ctrl_racl_error
    RaclCtrlRaclError = 95,
    /// ac_range_check_deny_cnt_reached
    AcRangeCheckDenyCntReached = 96,
}

impl TryFrom<u32> for PlicIrqId {
    type Error = u32;
    fn try_from(val: u32) -> Result<Self, Self::Error> {
        match val {
            0 => Ok(Self::None),
            1 => Ok(Self::Uart0TxWatermark),
            2 => Ok(Self::Uart0RxWatermark),
            3 => Ok(Self::Uart0TxDone),
            4 => Ok(Self::Uart0RxOverflow),
            5 => Ok(Self::Uart0RxFrameErr),
            6 => Ok(Self::Uart0RxBreakErr),
            7 => Ok(Self::Uart0RxTimeout),
            8 => Ok(Self::Uart0RxParityErr),
            9 => Ok(Self::Uart0TxEmpty),
            10 => Ok(Self::RvTimerTimerExpiredHart0Timer0),
            11 => Ok(Self::OtpCtrlOtpOperationDone),
            12 => Ok(Self::OtpCtrlOtpError),
            13 => Ok(Self::AlertHandlerClassa),
            14 => Ok(Self::AlertHandlerClassb),
            15 => Ok(Self::AlertHandlerClassc),
            16 => Ok(Self::AlertHandlerClassd),
            17 => Ok(Self::PwrmgrAonWakeup),
            18 => Ok(Self::AonTimerAonWkupTimerExpired),
            19 => Ok(Self::AonTimerAonWdogTimerBark),
            20 => Ok(Self::SocProxyExternal0),
            21 => Ok(Self::SocProxyExternal1),
            22 => Ok(Self::SocProxyExternal2),
            23 => Ok(Self::SocProxyExternal3),
            24 => Ok(Self::SocProxyExternal4),
            25 => Ok(Self::SocProxyExternal5),
            26 => Ok(Self::SocProxyExternal6),
            27 => Ok(Self::SocProxyExternal7),
            28 => Ok(Self::SocProxyExternal8),
            29 => Ok(Self::SocProxyExternal9),
            30 => Ok(Self::SocProxyExternal10),
            31 => Ok(Self::SocProxyExternal11),
            32 => Ok(Self::SocProxyExternal12),
            33 => Ok(Self::SocProxyExternal13),
            34 => Ok(Self::SocProxyExternal14),
            35 => Ok(Self::SocProxyExternal15),
            36 => Ok(Self::SocProxyExternal16),
            37 => Ok(Self::SocProxyExternal17),
            38 => Ok(Self::SocProxyExternal18),
            39 => Ok(Self::SocProxyExternal19),
            40 => Ok(Self::SocProxyExternal20),
            41 => Ok(Self::SocProxyExternal21),
            42 => Ok(Self::SocProxyExternal22),
            43 => Ok(Self::SocProxyExternal23),
            44 => Ok(Self::SocProxyExternal24),
            45 => Ok(Self::SocProxyExternal25),
            46 => Ok(Self::SocProxyExternal26),
            47 => Ok(Self::SocProxyExternal27),
            48 => Ok(Self::SocProxyExternal28),
            49 => Ok(Self::SocProxyExternal29),
            50 => Ok(Self::SocProxyExternal30),
            51 => Ok(Self::SocProxyExternal31),
            52 => Ok(Self::HmacHmacDone),
            53 => Ok(Self::HmacFifoEmpty),
            54 => Ok(Self::HmacHmacErr),
            55 => Ok(Self::KmacKmacDone),
            56 => Ok(Self::KmacFifoEmpty),
            57 => Ok(Self::KmacKmacErr),
            58 => Ok(Self::OtbnDone),
            59 => Ok(Self::KeymgrDpeOpDone),
            60 => Ok(Self::CsrngCsCmdReqDone),
            61 => Ok(Self::CsrngCsEntropyReq),
            62 => Ok(Self::CsrngCsHwInstExc),
            63 => Ok(Self::CsrngCsFatalErr),
            64 => Ok(Self::Edn0EdnCmdReqDone),
            65 => Ok(Self::Edn0EdnFatalErr),
            66 => Ok(Self::Edn1EdnCmdReqDone),
            67 => Ok(Self::Edn1EdnFatalErr),
            68 => Ok(Self::DmaDmaDone),
            69 => Ok(Self::DmaDmaChunkDone),
            70 => Ok(Self::DmaDmaError),
            71 => Ok(Self::Mbx0MbxReady),
            72 => Ok(Self::Mbx0MbxAbort),
            73 => Ok(Self::Mbx0MbxError),
            74 => Ok(Self::Mbx1MbxReady),
            75 => Ok(Self::Mbx1MbxAbort),
            76 => Ok(Self::Mbx1MbxError),
            77 => Ok(Self::Mbx2MbxReady),
            78 => Ok(Self::Mbx2MbxAbort),
            79 => Ok(Self::Mbx2MbxError),
            80 => Ok(Self::Mbx3MbxReady),
            81 => Ok(Self::Mbx3MbxAbort),
            82 => Ok(Self::Mbx3MbxError),
            83 => Ok(Self::Mbx4MbxReady),
            84 => Ok(Self::Mbx4MbxAbort),
            85 => Ok(Self::Mbx4MbxError),
            86 => Ok(Self::Mbx5MbxReady),
            87 => Ok(Self::Mbx5MbxAbort),
            88 => Ok(Self::Mbx5MbxError),
            89 => Ok(Self::Mbx6MbxReady),
            90 => Ok(Self::Mbx6MbxAbort),
            91 => Ok(Self::Mbx6MbxError),
            92 => Ok(Self::MbxJtagMbxReady),
            93 => Ok(Self::MbxJtagMbxAbort),
            94 => Ok(Self::MbxJtagMbxError),
            95 => Ok(Self::RaclCtrlRaclError),
            96 => Ok(Self::AcRangeCheckDenyCntReached),
            _ => Err(val),
        }
    }
}

/// PLIC Interrupt Target.
///
/// Enumeration used to determine which set of IE, CC, threshold registers to
/// access for a given interrupt target.
#[derive(Copy, Clone, PartialEq, Eq)]
#[repr(u32)]
pub enum PlicTarget {
    /// Ibex Core 0
    Ibex0 = 0,
}

/// PLIC Interrupt Source to Peripheral Map
///
/// This array is a mapping from `PlicIrqId` to
/// `PlicPeripheral`.
pub const PLIC_INTERRUPT_FOR_PERIPHERAL: [PlicPeripheral; 97] = [
    // None -> PlicPeripheral::Unknown
    PlicPeripheral::Unknown,
    // Uart0TxWatermark -> PlicPeripheral::Uart0
    PlicPeripheral::Uart0,
    // Uart0RxWatermark -> PlicPeripheral::Uart0
    PlicPeripheral::Uart0,
    // Uart0TxDone -> PlicPeripheral::Uart0
    PlicPeripheral::Uart0,
    // Uart0RxOverflow -> PlicPeripheral::Uart0
    PlicPeripheral::Uart0,
    // Uart0RxFrameErr -> PlicPeripheral::Uart0
    PlicPeripheral::Uart0,
    // Uart0RxBreakErr -> PlicPeripheral::Uart0
    PlicPeripheral::Uart0,
    // Uart0RxTimeout -> PlicPeripheral::Uart0
    PlicPeripheral::Uart0,
    // Uart0RxParityErr -> PlicPeripheral::Uart0
    PlicPeripheral::Uart0,
    // Uart0TxEmpty -> PlicPeripheral::Uart0
    PlicPeripheral::Uart0,
    // RvTimerTimerExpiredHart0Timer0 -> PlicPeripheral::RvTimer
    PlicPeripheral::RvTimer,
    // OtpCtrlOtpOperationDone -> PlicPeripheral::OtpCtrl
    PlicPeripheral::OtpCtrl,
    // OtpCtrlOtpError -> PlicPeripheral::OtpCtrl
    PlicPeripheral::OtpCtrl,
    // AlertHandlerClassa -> PlicPeripheral::AlertHandler
    PlicPeripheral::AlertHandler,
    // AlertHandlerClassb -> PlicPeripheral::AlertHandler
    PlicPeripheral::AlertHandler,
    // AlertHandlerClassc -> PlicPeripheral::AlertHandler
    PlicPeripheral::AlertHandler,
    // AlertHandlerClassd -> PlicPeripheral::AlertHandler
    PlicPeripheral::AlertHandler,
    // PwrmgrAonWakeup -> PlicPeripheral::PwrmgrAon
    PlicPeripheral::PwrmgrAon,
    // AonTimerAonWkupTimerExpired -> PlicPeripheral::AonTimerAon
    PlicPeripheral::AonTimerAon,
    // AonTimerAonWdogTimerBark -> PlicPeripheral::AonTimerAon
    PlicPeripheral::AonTimerAon,
    // SocProxyExternal0 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal1 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal2 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal3 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal4 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal5 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal6 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal7 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal8 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal9 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal10 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal11 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal12 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal13 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal14 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal15 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal16 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal17 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal18 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal19 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal20 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal21 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal22 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal23 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal24 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal25 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal26 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal27 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal28 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal29 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal30 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // SocProxyExternal31 -> PlicPeripheral::SocProxy
    PlicPeripheral::SocProxy,
    // HmacHmacDone -> PlicPeripheral::Hmac
    PlicPeripheral::Hmac,
    // HmacFifoEmpty -> PlicPeripheral::Hmac
    PlicPeripheral::Hmac,
    // HmacHmacErr -> PlicPeripheral::Hmac
    PlicPeripheral::Hmac,
    // KmacKmacDone -> PlicPeripheral::Kmac
    PlicPeripheral::Kmac,
    // KmacFifoEmpty -> PlicPeripheral::Kmac
    PlicPeripheral::Kmac,
    // KmacKmacErr -> PlicPeripheral::Kmac
    PlicPeripheral::Kmac,
    // OtbnDone -> PlicPeripheral::Otbn
    PlicPeripheral::Otbn,
    // KeymgrDpeOpDone -> PlicPeripheral::KeymgrDpe
    PlicPeripheral::KeymgrDpe,
    // CsrngCsCmdReqDone -> PlicPeripheral::Csrng
    PlicPeripheral::Csrng,
    // CsrngCsEntropyReq -> PlicPeripheral::Csrng
    PlicPeripheral::Csrng,
    // CsrngCsHwInstExc -> PlicPeripheral::Csrng
    PlicPeripheral::Csrng,
    // CsrngCsFatalErr -> PlicPeripheral::Csrng
    PlicPeripheral::Csrng,
    // Edn0EdnCmdReqDone -> PlicPeripheral::Edn0
    PlicPeripheral::Edn0,
    // Edn0EdnFatalErr -> PlicPeripheral::Edn0
    PlicPeripheral::Edn0,
    // Edn1EdnCmdReqDone -> PlicPeripheral::Edn1
    PlicPeripheral::Edn1,
    // Edn1EdnFatalErr -> PlicPeripheral::Edn1
    PlicPeripheral::Edn1,
    // DmaDmaDone -> PlicPeripheral::Dma
    PlicPeripheral::Dma,
    // DmaDmaChunkDone -> PlicPeripheral::Dma
    PlicPeripheral::Dma,
    // DmaDmaError -> PlicPeripheral::Dma
    PlicPeripheral::Dma,
    // Mbx0MbxReady -> PlicPeripheral::Mbx0
    PlicPeripheral::Mbx0,
    // Mbx0MbxAbort -> PlicPeripheral::Mbx0
    PlicPeripheral::Mbx0,
    // Mbx0MbxError -> PlicPeripheral::Mbx0
    PlicPeripheral::Mbx0,
    // Mbx1MbxReady -> PlicPeripheral::Mbx1
    PlicPeripheral::Mbx1,
    // Mbx1MbxAbort -> PlicPeripheral::Mbx1
    PlicPeripheral::Mbx1,
    // Mbx1MbxError -> PlicPeripheral::Mbx1
    PlicPeripheral::Mbx1,
    // Mbx2MbxReady -> PlicPeripheral::Mbx2
    PlicPeripheral::Mbx2,
    // Mbx2MbxAbort -> PlicPeripheral::Mbx2
    PlicPeripheral::Mbx2,
    // Mbx2MbxError -> PlicPeripheral::Mbx2
    PlicPeripheral::Mbx2,
    // Mbx3MbxReady -> PlicPeripheral::Mbx3
    PlicPeripheral::Mbx3,
    // Mbx3MbxAbort -> PlicPeripheral::Mbx3
    PlicPeripheral::Mbx3,
    // Mbx3MbxError -> PlicPeripheral::Mbx3
    PlicPeripheral::Mbx3,
    // Mbx4MbxReady -> PlicPeripheral::Mbx4
    PlicPeripheral::Mbx4,
    // Mbx4MbxAbort -> PlicPeripheral::Mbx4
    PlicPeripheral::Mbx4,
    // Mbx4MbxError -> PlicPeripheral::Mbx4
    PlicPeripheral::Mbx4,
    // Mbx5MbxReady -> PlicPeripheral::Mbx5
    PlicPeripheral::Mbx5,
    // Mbx5MbxAbort -> PlicPeripheral::Mbx5
    PlicPeripheral::Mbx5,
    // Mbx5MbxError -> PlicPeripheral::Mbx5
    PlicPeripheral::Mbx5,
    // Mbx6MbxReady -> PlicPeripheral::Mbx6
    PlicPeripheral::Mbx6,
    // Mbx6MbxAbort -> PlicPeripheral::Mbx6
    PlicPeripheral::Mbx6,
    // Mbx6MbxError -> PlicPeripheral::Mbx6
    PlicPeripheral::Mbx6,
    // MbxJtagMbxReady -> PlicPeripheral::MbxJtag
    PlicPeripheral::MbxJtag,
    // MbxJtagMbxAbort -> PlicPeripheral::MbxJtag
    PlicPeripheral::MbxJtag,
    // MbxJtagMbxError -> PlicPeripheral::MbxJtag
    PlicPeripheral::MbxJtag,
    // RaclCtrlRaclError -> PlicPeripheral::RaclCtrl
    PlicPeripheral::RaclCtrl,
    // AcRangeCheckDenyCntReached -> PlicPeripheral::AcRangeCheck
    PlicPeripheral::AcRangeCheck,
];

/// Alert Handler Source Peripheral.
///
/// Enumeration used to determine which peripheral asserted the corresponding
/// alert.
#[derive(Copy, Clone, PartialEq, Eq)]
#[repr(u32)]
pub enum AlertPeripheral {
    /// External Peripheral
    External = 0,
    /// uart0
    Uart0 = 1,
    /// rv_timer
    RvTimer = 2,
    /// otp_ctrl
    OtpCtrl = 3,
    /// lc_ctrl
    LcCtrl = 4,
    /// pwrmgr_aon
    PwrmgrAon = 5,
    /// rstmgr_aon
    RstmgrAon = 6,
    /// clkmgr_aon
    ClkmgrAon = 7,
    /// aon_timer_aon
    AonTimerAon = 8,
    /// soc_proxy
    SocProxy = 9,
    /// sram_ctrl_ret_aon
    SramCtrlRetAon = 10,
    /// rv_dm
    RvDm = 11,
    /// rv_plic
    RvPlic = 12,
    /// aes
    Aes = 13,
    /// hmac
    Hmac = 14,
    /// kmac
    Kmac = 15,
    /// otbn
    Otbn = 16,
    /// keymgr_dpe
    KeymgrDpe = 17,
    /// csrng
    Csrng = 18,
    /// edn0
    Edn0 = 19,
    /// edn1
    Edn1 = 20,
    /// sram_ctrl_main
    SramCtrlMain = 21,
    /// sram_ctrl_mbox
    SramCtrlMbox = 22,
    /// rom_ctrl0
    RomCtrl0 = 23,
    /// rom_ctrl1
    RomCtrl1 = 24,
    /// dma
    Dma = 25,
    /// mbx0
    Mbx0 = 26,
    /// mbx1
    Mbx1 = 27,
    /// mbx2
    Mbx2 = 28,
    /// mbx3
    Mbx3 = 29,
    /// mbx4
    Mbx4 = 30,
    /// mbx5
    Mbx5 = 31,
    /// mbx6
    Mbx6 = 32,
    /// mbx_jtag
    MbxJtag = 33,
    /// soc_dbg_ctrl
    SocDbgCtrl = 34,
    /// racl_ctrl
    RaclCtrl = 35,
    /// ac_range_check
    AcRangeCheck = 36,
    /// rv_core_ibex
    RvCoreIbex = 37,
}

/// Alert Handler Alert Source.
///
/// Enumeration of all Alert Handler Alert Sources. The alert sources belonging to
/// the same peripheral are guaranteed to be consecutive.
#[derive(Copy, Clone, PartialEq, Eq)]
#[repr(u32)]
pub enum AlertId {
    /// uart0_fatal_fault
    Uart0FatalFault = 0,
    /// rv_timer_fatal_fault
    RvTimerFatalFault = 1,
    /// otp_ctrl_fatal_macro_error
    OtpCtrlFatalMacroError = 2,
    /// otp_ctrl_fatal_check_error
    OtpCtrlFatalCheckError = 3,
    /// otp_ctrl_fatal_bus_integ_error
    OtpCtrlFatalBusIntegError = 4,
    /// otp_ctrl_fatal_prim_otp_alert
    OtpCtrlFatalPrimOtpAlert = 5,
    /// otp_ctrl_recov_prim_otp_alert
    OtpCtrlRecovPrimOtpAlert = 6,
    /// lc_ctrl_fatal_prog_error
    LcCtrlFatalProgError = 7,
    /// lc_ctrl_fatal_state_error
    LcCtrlFatalStateError = 8,
    /// lc_ctrl_fatal_bus_integ_error
    LcCtrlFatalBusIntegError = 9,
    /// pwrmgr_aon_fatal_fault
    PwrmgrAonFatalFault = 10,
    /// rstmgr_aon_fatal_fault
    RstmgrAonFatalFault = 11,
    /// rstmgr_aon_fatal_cnsty_fault
    RstmgrAonFatalCnstyFault = 12,
    /// clkmgr_aon_recov_fault
    ClkmgrAonRecovFault = 13,
    /// clkmgr_aon_fatal_fault
    ClkmgrAonFatalFault = 14,
    /// aon_timer_aon_fatal_fault
    AonTimerAonFatalFault = 15,
    /// soc_proxy_fatal_alert_intg
    SocProxyFatalAlertIntg = 16,
    /// soc_proxy_fatal_alert_external_0
    SocProxyFatalAlertExternal0 = 17,
    /// soc_proxy_fatal_alert_external_1
    SocProxyFatalAlertExternal1 = 18,
    /// soc_proxy_fatal_alert_external_2
    SocProxyFatalAlertExternal2 = 19,
    /// soc_proxy_fatal_alert_external_3
    SocProxyFatalAlertExternal3 = 20,
    /// soc_proxy_fatal_alert_external_4
    SocProxyFatalAlertExternal4 = 21,
    /// soc_proxy_fatal_alert_external_5
    SocProxyFatalAlertExternal5 = 22,
    /// soc_proxy_fatal_alert_external_6
    SocProxyFatalAlertExternal6 = 23,
    /// soc_proxy_fatal_alert_external_7
    SocProxyFatalAlertExternal7 = 24,
    /// soc_proxy_fatal_alert_external_8
    SocProxyFatalAlertExternal8 = 25,
    /// soc_proxy_fatal_alert_external_9
    SocProxyFatalAlertExternal9 = 26,
    /// soc_proxy_fatal_alert_external_10
    SocProxyFatalAlertExternal10 = 27,
    /// soc_proxy_fatal_alert_external_11
    SocProxyFatalAlertExternal11 = 28,
    /// soc_proxy_fatal_alert_external_12
    SocProxyFatalAlertExternal12 = 29,
    /// soc_proxy_fatal_alert_external_13
    SocProxyFatalAlertExternal13 = 30,
    /// soc_proxy_fatal_alert_external_14
    SocProxyFatalAlertExternal14 = 31,
    /// soc_proxy_fatal_alert_external_15
    SocProxyFatalAlertExternal15 = 32,
    /// soc_proxy_fatal_alert_external_16
    SocProxyFatalAlertExternal16 = 33,
    /// soc_proxy_fatal_alert_external_17
    SocProxyFatalAlertExternal17 = 34,
    /// soc_proxy_fatal_alert_external_18
    SocProxyFatalAlertExternal18 = 35,
    /// soc_proxy_fatal_alert_external_19
    SocProxyFatalAlertExternal19 = 36,
    /// soc_proxy_fatal_alert_external_20
    SocProxyFatalAlertExternal20 = 37,
    /// soc_proxy_fatal_alert_external_21
    SocProxyFatalAlertExternal21 = 38,
    /// soc_proxy_fatal_alert_external_22
    SocProxyFatalAlertExternal22 = 39,
    /// soc_proxy_fatal_alert_external_23
    SocProxyFatalAlertExternal23 = 40,
    /// soc_proxy_recov_alert_external_0
    SocProxyRecovAlertExternal0 = 41,
    /// soc_proxy_recov_alert_external_1
    SocProxyRecovAlertExternal1 = 42,
    /// soc_proxy_recov_alert_external_2
    SocProxyRecovAlertExternal2 = 43,
    /// soc_proxy_recov_alert_external_3
    SocProxyRecovAlertExternal3 = 44,
    /// sram_ctrl_ret_aon_fatal_error
    SramCtrlRetAonFatalError = 45,
    /// rv_dm_fatal_fault
    RvDmFatalFault = 46,
    /// rv_plic_fatal_fault
    RvPlicFatalFault = 47,
    /// aes_recov_ctrl_update_err
    AesRecovCtrlUpdateErr = 48,
    /// aes_fatal_fault
    AesFatalFault = 49,
    /// hmac_fatal_fault
    HmacFatalFault = 50,
    /// kmac_recov_operation_err
    KmacRecovOperationErr = 51,
    /// kmac_fatal_fault_err
    KmacFatalFaultErr = 52,
    /// otbn_fatal
    OtbnFatal = 53,
    /// otbn_recov
    OtbnRecov = 54,
    /// keymgr_dpe_recov_operation_err
    KeymgrDpeRecovOperationErr = 55,
    /// keymgr_dpe_fatal_fault_err
    KeymgrDpeFatalFaultErr = 56,
    /// csrng_recov_alert
    CsrngRecovAlert = 57,
    /// csrng_fatal_alert
    CsrngFatalAlert = 58,
    /// edn0_recov_alert
    Edn0RecovAlert = 59,
    /// edn0_fatal_alert
    Edn0FatalAlert = 60,
    /// edn1_recov_alert
    Edn1RecovAlert = 61,
    /// edn1_fatal_alert
    Edn1FatalAlert = 62,
    /// sram_ctrl_main_fatal_error
    SramCtrlMainFatalError = 63,
    /// sram_ctrl_mbox_fatal_error
    SramCtrlMboxFatalError = 64,
    /// rom_ctrl0_fatal
    RomCtrl0Fatal = 65,
    /// rom_ctrl1_fatal
    RomCtrl1Fatal = 66,
    /// dma_fatal_fault
    DmaFatalFault = 67,
    /// mbx0_fatal_fault
    Mbx0FatalFault = 68,
    /// mbx0_recov_fault
    Mbx0RecovFault = 69,
    /// mbx1_fatal_fault
    Mbx1FatalFault = 70,
    /// mbx1_recov_fault
    Mbx1RecovFault = 71,
    /// mbx2_fatal_fault
    Mbx2FatalFault = 72,
    /// mbx2_recov_fault
    Mbx2RecovFault = 73,
    /// mbx3_fatal_fault
    Mbx3FatalFault = 74,
    /// mbx3_recov_fault
    Mbx3RecovFault = 75,
    /// mbx4_fatal_fault
    Mbx4FatalFault = 76,
    /// mbx4_recov_fault
    Mbx4RecovFault = 77,
    /// mbx5_fatal_fault
    Mbx5FatalFault = 78,
    /// mbx5_recov_fault
    Mbx5RecovFault = 79,
    /// mbx6_fatal_fault
    Mbx6FatalFault = 80,
    /// mbx6_recov_fault
    Mbx6RecovFault = 81,
    /// mbx_jtag_fatal_fault
    MbxJtagFatalFault = 82,
    /// mbx_jtag_recov_fault
    MbxJtagRecovFault = 83,
    /// soc_dbg_ctrl_fatal_fault
    SocDbgCtrlFatalFault = 84,
    /// soc_dbg_ctrl_recov_ctrl_update_err
    SocDbgCtrlRecovCtrlUpdateErr = 85,
    /// racl_ctrl_fatal_fault
    RaclCtrlFatalFault = 86,
    /// racl_ctrl_recov_ctrl_update_err
    RaclCtrlRecovCtrlUpdateErr = 87,
    /// ac_range_check_recov_ctrl_update_err
    AcRangeCheckRecovCtrlUpdateErr = 88,
    /// ac_range_check_fatal_fault
    AcRangeCheckFatalFault = 89,
    /// rv_core_ibex_fatal_sw_err
    RvCoreIbexFatalSwErr = 90,
    /// rv_core_ibex_recov_sw_err
    RvCoreIbexRecovSwErr = 91,
    /// rv_core_ibex_fatal_hw_err
    RvCoreIbexFatalHwErr = 92,
    /// rv_core_ibex_recov_hw_err
    RvCoreIbexRecovHwErr = 93,
}

impl TryFrom<u32> for AlertId {
    type Error = u32;
    fn try_from(val: u32) -> Result<Self, Self::Error> {
        match val {
            0 => Ok(Self::Uart0FatalFault),
            1 => Ok(Self::RvTimerFatalFault),
            2 => Ok(Self::OtpCtrlFatalMacroError),
            3 => Ok(Self::OtpCtrlFatalCheckError),
            4 => Ok(Self::OtpCtrlFatalBusIntegError),
            5 => Ok(Self::OtpCtrlFatalPrimOtpAlert),
            6 => Ok(Self::OtpCtrlRecovPrimOtpAlert),
            7 => Ok(Self::LcCtrlFatalProgError),
            8 => Ok(Self::LcCtrlFatalStateError),
            9 => Ok(Self::LcCtrlFatalBusIntegError),
            10 => Ok(Self::PwrmgrAonFatalFault),
            11 => Ok(Self::RstmgrAonFatalFault),
            12 => Ok(Self::RstmgrAonFatalCnstyFault),
            13 => Ok(Self::ClkmgrAonRecovFault),
            14 => Ok(Self::ClkmgrAonFatalFault),
            15 => Ok(Self::AonTimerAonFatalFault),
            16 => Ok(Self::SocProxyFatalAlertIntg),
            17 => Ok(Self::SocProxyFatalAlertExternal0),
            18 => Ok(Self::SocProxyFatalAlertExternal1),
            19 => Ok(Self::SocProxyFatalAlertExternal2),
            20 => Ok(Self::SocProxyFatalAlertExternal3),
            21 => Ok(Self::SocProxyFatalAlertExternal4),
            22 => Ok(Self::SocProxyFatalAlertExternal5),
            23 => Ok(Self::SocProxyFatalAlertExternal6),
            24 => Ok(Self::SocProxyFatalAlertExternal7),
            25 => Ok(Self::SocProxyFatalAlertExternal8),
            26 => Ok(Self::SocProxyFatalAlertExternal9),
            27 => Ok(Self::SocProxyFatalAlertExternal10),
            28 => Ok(Self::SocProxyFatalAlertExternal11),
            29 => Ok(Self::SocProxyFatalAlertExternal12),
            30 => Ok(Self::SocProxyFatalAlertExternal13),
            31 => Ok(Self::SocProxyFatalAlertExternal14),
            32 => Ok(Self::SocProxyFatalAlertExternal15),
            33 => Ok(Self::SocProxyFatalAlertExternal16),
            34 => Ok(Self::SocProxyFatalAlertExternal17),
            35 => Ok(Self::SocProxyFatalAlertExternal18),
            36 => Ok(Self::SocProxyFatalAlertExternal19),
            37 => Ok(Self::SocProxyFatalAlertExternal20),
            38 => Ok(Self::SocProxyFatalAlertExternal21),
            39 => Ok(Self::SocProxyFatalAlertExternal22),
            40 => Ok(Self::SocProxyFatalAlertExternal23),
            41 => Ok(Self::SocProxyRecovAlertExternal0),
            42 => Ok(Self::SocProxyRecovAlertExternal1),
            43 => Ok(Self::SocProxyRecovAlertExternal2),
            44 => Ok(Self::SocProxyRecovAlertExternal3),
            45 => Ok(Self::SramCtrlRetAonFatalError),
            46 => Ok(Self::RvDmFatalFault),
            47 => Ok(Self::RvPlicFatalFault),
            48 => Ok(Self::AesRecovCtrlUpdateErr),
            49 => Ok(Self::AesFatalFault),
            50 => Ok(Self::HmacFatalFault),
            51 => Ok(Self::KmacRecovOperationErr),
            52 => Ok(Self::KmacFatalFaultErr),
            53 => Ok(Self::OtbnFatal),
            54 => Ok(Self::OtbnRecov),
            55 => Ok(Self::KeymgrDpeRecovOperationErr),
            56 => Ok(Self::KeymgrDpeFatalFaultErr),
            57 => Ok(Self::CsrngRecovAlert),
            58 => Ok(Self::CsrngFatalAlert),
            59 => Ok(Self::Edn0RecovAlert),
            60 => Ok(Self::Edn0FatalAlert),
            61 => Ok(Self::Edn1RecovAlert),
            62 => Ok(Self::Edn1FatalAlert),
            63 => Ok(Self::SramCtrlMainFatalError),
            64 => Ok(Self::SramCtrlMboxFatalError),
            65 => Ok(Self::RomCtrl0Fatal),
            66 => Ok(Self::RomCtrl1Fatal),
            67 => Ok(Self::DmaFatalFault),
            68 => Ok(Self::Mbx0FatalFault),
            69 => Ok(Self::Mbx0RecovFault),
            70 => Ok(Self::Mbx1FatalFault),
            71 => Ok(Self::Mbx1RecovFault),
            72 => Ok(Self::Mbx2FatalFault),
            73 => Ok(Self::Mbx2RecovFault),
            74 => Ok(Self::Mbx3FatalFault),
            75 => Ok(Self::Mbx3RecovFault),
            76 => Ok(Self::Mbx4FatalFault),
            77 => Ok(Self::Mbx4RecovFault),
            78 => Ok(Self::Mbx5FatalFault),
            79 => Ok(Self::Mbx5RecovFault),
            80 => Ok(Self::Mbx6FatalFault),
            81 => Ok(Self::Mbx6RecovFault),
            82 => Ok(Self::MbxJtagFatalFault),
            83 => Ok(Self::MbxJtagRecovFault),
            84 => Ok(Self::SocDbgCtrlFatalFault),
            85 => Ok(Self::SocDbgCtrlRecovCtrlUpdateErr),
            86 => Ok(Self::RaclCtrlFatalFault),
            87 => Ok(Self::RaclCtrlRecovCtrlUpdateErr),
            88 => Ok(Self::AcRangeCheckRecovCtrlUpdateErr),
            89 => Ok(Self::AcRangeCheckFatalFault),
            90 => Ok(Self::RvCoreIbexFatalSwErr),
            91 => Ok(Self::RvCoreIbexRecovSwErr),
            92 => Ok(Self::RvCoreIbexFatalHwErr),
            93 => Ok(Self::RvCoreIbexRecovHwErr),
            _ => Err(val),
        }
    }
}

/// Alert Handler Alert Source to Peripheral Map
///
/// This array is a mapping from `AlertId` to
/// `AlertPeripheral`.
pub const ALERT_FOR_PERIPHERAL: [AlertPeripheral; 94] = [
    // Uart0FatalFault -> AlertPeripheral::Uart0
    AlertPeripheral::Uart0,
    // RvTimerFatalFault -> AlertPeripheral::RvTimer
    AlertPeripheral::RvTimer,
    // OtpCtrlFatalMacroError -> AlertPeripheral::OtpCtrl
    AlertPeripheral::OtpCtrl,
    // OtpCtrlFatalCheckError -> AlertPeripheral::OtpCtrl
    AlertPeripheral::OtpCtrl,
    // OtpCtrlFatalBusIntegError -> AlertPeripheral::OtpCtrl
    AlertPeripheral::OtpCtrl,
    // OtpCtrlFatalPrimOtpAlert -> AlertPeripheral::OtpCtrl
    AlertPeripheral::OtpCtrl,
    // OtpCtrlRecovPrimOtpAlert -> AlertPeripheral::OtpCtrl
    AlertPeripheral::OtpCtrl,
    // LcCtrlFatalProgError -> AlertPeripheral::LcCtrl
    AlertPeripheral::LcCtrl,
    // LcCtrlFatalStateError -> AlertPeripheral::LcCtrl
    AlertPeripheral::LcCtrl,
    // LcCtrlFatalBusIntegError -> AlertPeripheral::LcCtrl
    AlertPeripheral::LcCtrl,
    // PwrmgrAonFatalFault -> AlertPeripheral::PwrmgrAon
    AlertPeripheral::PwrmgrAon,
    // RstmgrAonFatalFault -> AlertPeripheral::RstmgrAon
    AlertPeripheral::RstmgrAon,
    // RstmgrAonFatalCnstyFault -> AlertPeripheral::RstmgrAon
    AlertPeripheral::RstmgrAon,
    // ClkmgrAonRecovFault -> AlertPeripheral::ClkmgrAon
    AlertPeripheral::ClkmgrAon,
    // ClkmgrAonFatalFault -> AlertPeripheral::ClkmgrAon
    AlertPeripheral::ClkmgrAon,
    // AonTimerAonFatalFault -> AlertPeripheral::AonTimerAon
    AlertPeripheral::AonTimerAon,
    // SocProxyFatalAlertIntg -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal0 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal1 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal2 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal3 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal4 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal5 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal6 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal7 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal8 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal9 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal10 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal11 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal12 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal13 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal14 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal15 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal16 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal17 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal18 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal19 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal20 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal21 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal22 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyFatalAlertExternal23 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyRecovAlertExternal0 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyRecovAlertExternal1 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyRecovAlertExternal2 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SocProxyRecovAlertExternal3 -> AlertPeripheral::SocProxy
    AlertPeripheral::SocProxy,
    // SramCtrlRetAonFatalError -> AlertPeripheral::SramCtrlRetAon
    AlertPeripheral::SramCtrlRetAon,
    // RvDmFatalFault -> AlertPeripheral::RvDm
    AlertPeripheral::RvDm,
    // RvPlicFatalFault -> AlertPeripheral::RvPlic
    AlertPeripheral::RvPlic,
    // AesRecovCtrlUpdateErr -> AlertPeripheral::Aes
    AlertPeripheral::Aes,
    // AesFatalFault -> AlertPeripheral::Aes
    AlertPeripheral::Aes,
    // HmacFatalFault -> AlertPeripheral::Hmac
    AlertPeripheral::Hmac,
    // KmacRecovOperationErr -> AlertPeripheral::Kmac
    AlertPeripheral::Kmac,
    // KmacFatalFaultErr -> AlertPeripheral::Kmac
    AlertPeripheral::Kmac,
    // OtbnFatal -> AlertPeripheral::Otbn
    AlertPeripheral::Otbn,
    // OtbnRecov -> AlertPeripheral::Otbn
    AlertPeripheral::Otbn,
    // KeymgrDpeRecovOperationErr -> AlertPeripheral::KeymgrDpe
    AlertPeripheral::KeymgrDpe,
    // KeymgrDpeFatalFaultErr -> AlertPeripheral::KeymgrDpe
    AlertPeripheral::KeymgrDpe,
    // CsrngRecovAlert -> AlertPeripheral::Csrng
    AlertPeripheral::Csrng,
    // CsrngFatalAlert -> AlertPeripheral::Csrng
    AlertPeripheral::Csrng,
    // Edn0RecovAlert -> AlertPeripheral::Edn0
    AlertPeripheral::Edn0,
    // Edn0FatalAlert -> AlertPeripheral::Edn0
    AlertPeripheral::Edn0,
    // Edn1RecovAlert -> AlertPeripheral::Edn1
    AlertPeripheral::Edn1,
    // Edn1FatalAlert -> AlertPeripheral::Edn1
    AlertPeripheral::Edn1,
    // SramCtrlMainFatalError -> AlertPeripheral::SramCtrlMain
    AlertPeripheral::SramCtrlMain,
    // SramCtrlMboxFatalError -> AlertPeripheral::SramCtrlMbox
    AlertPeripheral::SramCtrlMbox,
    // RomCtrl0Fatal -> AlertPeripheral::RomCtrl0
    AlertPeripheral::RomCtrl0,
    // RomCtrl1Fatal -> AlertPeripheral::RomCtrl1
    AlertPeripheral::RomCtrl1,
    // DmaFatalFault -> AlertPeripheral::Dma
    AlertPeripheral::Dma,
    // Mbx0FatalFault -> AlertPeripheral::Mbx0
    AlertPeripheral::Mbx0,
    // Mbx0RecovFault -> AlertPeripheral::Mbx0
    AlertPeripheral::Mbx0,
    // Mbx1FatalFault -> AlertPeripheral::Mbx1
    AlertPeripheral::Mbx1,
    // Mbx1RecovFault -> AlertPeripheral::Mbx1
    AlertPeripheral::Mbx1,
    // Mbx2FatalFault -> AlertPeripheral::Mbx2
    AlertPeripheral::Mbx2,
    // Mbx2RecovFault -> AlertPeripheral::Mbx2
    AlertPeripheral::Mbx2,
    // Mbx3FatalFault -> AlertPeripheral::Mbx3
    AlertPeripheral::Mbx3,
    // Mbx3RecovFault -> AlertPeripheral::Mbx3
    AlertPeripheral::Mbx3,
    // Mbx4FatalFault -> AlertPeripheral::Mbx4
    AlertPeripheral::Mbx4,
    // Mbx4RecovFault -> AlertPeripheral::Mbx4
    AlertPeripheral::Mbx4,
    // Mbx5FatalFault -> AlertPeripheral::Mbx5
    AlertPeripheral::Mbx5,
    // Mbx5RecovFault -> AlertPeripheral::Mbx5
    AlertPeripheral::Mbx5,
    // Mbx6FatalFault -> AlertPeripheral::Mbx6
    AlertPeripheral::Mbx6,
    // Mbx6RecovFault -> AlertPeripheral::Mbx6
    AlertPeripheral::Mbx6,
    // MbxJtagFatalFault -> AlertPeripheral::MbxJtag
    AlertPeripheral::MbxJtag,
    // MbxJtagRecovFault -> AlertPeripheral::MbxJtag
    AlertPeripheral::MbxJtag,
    // SocDbgCtrlFatalFault -> AlertPeripheral::SocDbgCtrl
    AlertPeripheral::SocDbgCtrl,
    // SocDbgCtrlRecovCtrlUpdateErr -> AlertPeripheral::SocDbgCtrl
    AlertPeripheral::SocDbgCtrl,
    // RaclCtrlFatalFault -> AlertPeripheral::RaclCtrl
    AlertPeripheral::RaclCtrl,
    // RaclCtrlRecovCtrlUpdateErr -> AlertPeripheral::RaclCtrl
    AlertPeripheral::RaclCtrl,
    // AcRangeCheckRecovCtrlUpdateErr -> AlertPeripheral::AcRangeCheck
    AlertPeripheral::AcRangeCheck,
    // AcRangeCheckFatalFault -> AlertPeripheral::AcRangeCheck
    AlertPeripheral::AcRangeCheck,
    // RvCoreIbexFatalSwErr -> AlertPeripheral::RvCoreIbex
    AlertPeripheral::RvCoreIbex,
    // RvCoreIbexRecovSwErr -> AlertPeripheral::RvCoreIbex
    AlertPeripheral::RvCoreIbex,
    // RvCoreIbexFatalHwErr -> AlertPeripheral::RvCoreIbex
    AlertPeripheral::RvCoreIbex,
    // RvCoreIbexRecovHwErr -> AlertPeripheral::RvCoreIbex
    AlertPeripheral::RvCoreIbex,
];

/// Power Manager Wakeup Signals
#[derive(Copy, Clone, PartialEq, Eq)]
#[repr(u32)]
pub enum PowerManagerWakeUps {
    AonTimerAonWkupReq = 0,
    SocProxyWkupInternalReq = 1,
    SocProxyWkupExternalReq = 2,
}

/// Reset Manager Software Controlled Resets
#[derive(Copy, Clone, PartialEq, Eq)]
#[repr(u32)]
pub enum ResetManagerSwResets {
    SysSrc = 0,
}

/// Power Manager Reset Request Signals
#[derive(Copy, Clone, PartialEq, Eq)]
#[repr(u32)]
pub enum PowerManagerResetRequests {
    AonTimerAonAonTimerRstReq = 0,
    SocProxyRstReqExternal = 1,
}

/// Clock Manager Software-Controlled ("Gated") Clocks.
///
/// The Software has full control over these clocks.
#[derive(Copy, Clone, PartialEq, Eq)]
#[repr(u32)]
pub enum GateableClocks {
    /// Clock clk_io_div4_peri in group peri
    IoDiv4Peri = 0,
}

/// Clock Manager Software-Hinted Clocks.
///
/// The Software has partial control over these clocks. It can ask them to stop,
/// but the clock manager is in control of whether the clock actually is stopped.
#[derive(Copy, Clone, PartialEq, Eq)]
#[repr(u32)]
pub enum HintableClocks {
    /// Clock clk_main_aes in group trans
    MainAes = 0,
    /// Clock clk_main_hmac in group trans
    MainHmac = 1,
    /// Clock clk_main_kmac in group trans
    MainKmac = 2,
    /// Clock clk_main_otbn in group trans
    MainOtbn = 3,
}

/// MMIO Region
///
/// MMIO region excludes any memory that is separate from the module
/// configuration space, i.e. ROM, main SRAM, and mbx SRAM are excluded but
/// retention SRAM or spi_device are included.
pub const TOP_CROSSBAR_MMIO_BASE_ADDR: usize = 0x21100000;
pub const TOP_CROSSBAR_MMIO_SIZE_BYTES: usize = 0xF501000;
